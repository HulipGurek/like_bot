"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
"""
import logging
import os
from typing import Dict, Any, Optional

from telegram import Update
from telegram.ext import ContextTypes

from config import Config
from utils.user_manager import UserManager
from utils.logging_utils import log_user_action

logger = logging.getLogger(__name__)

class CommandHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""
    
    def __init__(self, user_manager: UserManager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥.
        
        Args:
            user_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        self.user_manager = user_manager
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        user = update.effective_user
        self.user_manager.register_user(user.id)
        log_user_action(user.id, user.username, "START")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∏–¥–µ–æ
            video_path = os.path.join(Config.WIPER_TYPES_IMG_DIR, "gy_video.mp4")
            if os.path.exists(video_path):
                with open(video_path, "rb") as video:
                    await update.message.reply_video(
                        video=video,
                        caption="üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!</b>\n–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ —â–µ—Ç–∫–∏ Goodyear –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ.\n\n"
                                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–∞—Ä–∫—É –∏–ª–∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                                "‚Ä¢ BMW 5\n‚Ä¢ KIA RIO\n‚Ä¢ Audi Q7 2019\n\n"
                                "–ö–æ–º–∞–Ω–¥—ã:\n"
                                "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
                                ,
                        parse_mode='HTML'
                    )
            else:
                await update.message.reply_text(
                    f"üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!</b>\n"
                    "–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ —â–µ—Ç–∫–∏ Goodyear –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ.\n\n"
                    "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–∞—Ä–∫—É –∏–ª–∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "‚Ä¢ BMW 5\n‚Ä¢ KIA RIO\n‚Ä¢ Audi Q7 2019\n\n"
                    "–ö–æ–º–∞–Ω–¥—ã:\n"
                    "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
                                        ,
                    parse_mode='HTML'
                )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await update.message.reply_text(
                "üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!</b>\n"
                "–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ —â–µ—Ç–∫–∏ Goodyear –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ.\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–∞—Ä–∫—É –∏–ª–∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ BMW 5\n‚Ä¢ KIA RIO\n‚Ä¢ Nissan X trail",
                parse_mode='HTML'
            )
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        user = update.effective_user
        log_user_action(user.id, user.username, "HELP")
        
        await update.message.reply_text(
            "<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —â–µ—Ç–∫–∏ Goodyear –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n"
            "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
            "1. –ù–∞–ø–∏—à–∏—Ç–µ –º–∞—Ä–∫—É –∏–ª–∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BMW 5', 'KIA RIO', 'Audi Q7 2019')\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ—Ä–ø—É—Å–∞ —â–µ—Ç–∫–∏\n"
            "4. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —â–µ—Ç–∫–∏\n"
            "5. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç –∏–ª–∏ –æ–¥–Ω—É —â–µ—Ç–∫—É\n"
            "6. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/brand - –ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
            "/feedback - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n\n"
            "<b>–°–æ–≤–µ—Ç—ã:</b>\n"
            "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏—Ö –≤ –±—É–¥—É—â–µ–º\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /brand –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–∞—Ä–∫–∏\n"
            "‚Ä¢ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /feedback",
            parse_mode='HTML'
        )
    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /stats.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        user = update.effective_user
        log_user_action(user.id, user.username, "STATS")
        
        stats = self.user_manager.get_stats()
        
        await update.message.reply_text(
            f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –±–æ—Ç—É: {stats['all_users_count']}\n"
            f"üßë‚Äçüíª –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unique_users']}",
            parse_mode='HTML'
        )
    
    async def favorites(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /favorites.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        user = update.effective_user
        log_user_action(user.id, user.username, "FAVORITES")
        
        favorites = self.user_manager.get_favorites(user.id)
        
        if not favorites:
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = f"<b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ (1-{min(Config.PAGINATION_SIZE, len(favorites))} –∏–∑ {len(favorites)}):</b>\n\n"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        buttons = []
        
        for i, car in enumerate(favorites[:Config.PAGINATION_SIZE]):
            brand = car.get('brand', '')
            model = car.get('model', '')
            years = car.get('years', '')
            
            message += f"{i+1}. {brand.title()} {model.upper()} ({years})\n"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            car_id = self.user_manager.store_callback_data(car)
            buttons.append([InlineKeyboardButton(
                f"{i+1}. {brand.title()} {model.upper()} ({years})",
                callback_data=f"model_{car_id}"
            )])
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            remove_id = self.user_manager.store_callback_data({"index": i})
            buttons.append([InlineKeyboardButton(
                f"‚ùå –£–¥–∞–ª–∏—Ç—å {brand.title()} {model.upper()} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                callback_data=f"remove_favorite_{remove_id}"
            )])
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = []
        
        if len(favorites) > Config.PAGINATION_SIZE:
            pagination_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data="page_1"))
        
        if pagination_buttons:
            buttons.append(pagination_buttons)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        buttons.append([InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")])
        
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode='HTML'
        )
    
    async def feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /feedback.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        user = update.effective_user
        log_user_action(user.id, user.username, "FEEDBACK")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤
        context.user_data['waiting_for_feedback'] = True
        
        await update.message.reply_text(
            "üìù <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞. –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –æ—Ç–∑—ã–≤–æ–º –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode='HTML'
        )
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        user = update.effective_user
        log_user_action(user.id, user.username, "CANCEL")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        if 'waiting_for_feedback' in context.user_data:
            del context.user_data['waiting_for_feedback']
            await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏–ª–∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —â–µ—Ç–æ–∫."
            )
    async def brand(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        '''
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /brand –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞—Ä–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.
        '''
        user = update.effective_user
        log_user_action(user.id, user.username, "BRAND_SEARCH")
        if 'waiting_for_brand' in context.user_data:
            del context.user_data['waiting_for_brand']
        if context.args and len(context.args) > 0:
            brand_query = ' '.join(context.args)
            await self._handle_brand_search(update, context, brand_query)
        else:
            await update.message.reply_text(
                "üöó <b>–ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>BMW</code> –∏–ª–∏ <code>Toyota</code>",
                parse_mode='HTML'
            )
            context.user_data['waiting_for_brand'] = True

    async def _handle_brand_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE, brand_query: str) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            brand_query: –ó–∞–ø—Ä–æ—Å –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        """
        from handlers.message_handler import MessageHandler
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç MessageHandler –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ–≥–æ –º–µ—Ç–æ–¥–æ–≤
        message_handler = MessageHandler(self.database, self.user_manager, self.synonym_manager)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ
        await message_handler.handle_brand_search(update, context, brand_query)
    
    async def handle_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–∑—ã–≤–∞.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            
        Returns:
            bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –æ—Ç–∑—ã–≤, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if 'waiting_for_feedback' not in context.user_data:
            return False
        
        user = update.effective_user
        feedback_text = update.message.text
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
        log_user_action(user.id, user.username, "FEEDBACK_SENT", feedback_text)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
        del context.user_data['waiting_for_feedback']
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –≤ —Ñ–∞–π–ª
        try:
            os.makedirs(os.path.join(Config.LOGS_DIR, 'feedback'), exist_ok=True)
            feedback_file = os.path.join(Config.LOGS_DIR, 'feedback', f'feedback_{user.id}.txt')
            
            with open(feedback_file, 'a', encoding='utf-8') as f:
                from utils.logging_utils import get_current_utc
                f.write(f"[{get_current_utc()}] {user.id} ({user.username}): {feedback_text}\n")
            
            await update.message.reply_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –µ–≥–æ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –±–æ—Ç–∞."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
        return True
